<?xml version="1.0"?>
<ruleset name="ATUM">
	<description>A custom set of rules to check for a WPized WordPress project</description>
	
	<!-- Exclude WP Core folders and files from being checked. -->
	<exclude-pattern>/docroot/wp-admin/*</exclude-pattern>
	<exclude-pattern>/docroot/wp-includes/*</exclude-pattern>
	<exclude-pattern>/docroot/wp-*.php</exclude-pattern>
	<exclude-pattern>/docroot/index.php</exclude-pattern>
	<exclude-pattern>/docroot/xmlrpc.php</exclude-pattern>
	<exclude-pattern>/docroot/wp-content/plugins/*</exclude-pattern>
	
	<!-- Exclude the Composer Vendor directory. -->
	<exclude-pattern>/vendor/*</exclude-pattern>
	
	<!-- Exclude the Node Modules directory. -->
	<exclude-pattern>/node_modules/*</exclude-pattern>
	
	<!-- Exclude minified Javascript files. -->
	<exclude-pattern>*.min.js</exclude-pattern>
	
	<!-- Include the WordPress-Extra standard. -->
	<rule ref="WordPress-Extra">
		<!--
		We may want a middle ground though. The best way to do this is add the
		entire ruleset, then rule by rule, remove ones that don't suit a project.
		We can do this by running `phpcs` with the '-s' flag, which allows us to
		see the names of the sniffs reporting errors.
		Once we know the sniff names, we can opt to exclude sniffs which don't
		suit our project like so.

		The below two examples just show how you can exclude rules.
		They are not intended as advice about which sniffs to exclude.
		-->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax.Found" />
		<exclude name="Generic.CodeAnalysis.UselessOverridingMethod.Found" />
		<exclude name="Generic.Commenting.Todo" />
		<exclude name="Generic.ControlStructures.InlineControlStructure" />
		<exclude name="Generic.Files.InlineHTML" />
		<exclude name="Generic.Files.LineLength" />
		<exclude name="Generic.PHP.LowerCaseConstant" />
		<exclude name="Generic.WhiteSpace.DisallowTabIndent" />
		
		<exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket" />
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine" />
		<exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments" />
		<exclude name="PSR2.Methods.MethodDeclaration.Underscore" />
		
		<exclude name="Squiz.PHP.CommentedOutCode.Found" />
		<exclude name="Squiz.Commenting.ClassComment.Missing" />
		<exclude name="Squiz.Commenting.FileComment.MissingPackageTag" />
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamComment" />
		<exclude name="Squiz.Commenting.FunctionComment.EmptyThrows" />
		<exclude name="Squiz.Commenting.FunctionCommentThrowTag.Missing" />
		<exclude name="Squiz.ControlStructures.ControlSignature.SpaceAfterCloseBrace" />
		<exclude name="Squiz.PHP.DisallowMultipleAssignments" />
		<exclude name="Squiz.PHP.EmbeddedPhp.ContentAfterOpen" />
		<exclude name="Squiz.PHP.EmbeddedPhp.ContentBeforeEnd" />
		<exclude name="Squiz.PHP.EmbeddedPhp.NoSemicolon" />
		<exclude name="Squiz.WhiteSpace.SuperfluousWhitespace.EndLine" />
		
		<exclude name="WordPress.CodeAnalysis.AssignmentInCondition.Found" />
		<exclude name="WordPress.Files.FileName.InvalidClassFileName" />
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase" />
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound" />
		<exclude name="WordPress.PHP.DevelopmentFunctions.error_log_error_log" />
		<exclude name="WordPress.PHP.DisallowShortTernary.Found" />
		<exclude name="WordPress.PHP.DontExtract" />
		<exclude name="WordPress.PHP.StrictInArray.MissingTrueStrict" />
		<exclude name="WordPress.Security.EscapeOutput.UnsafePrintingFunction" />
		<exclude name="WordPress.Security.NonceVerification.Missing" />
		<exclude name="WordPress.Security.NonceVerification.Recommended" />
		<exclude name="WordPress.WhiteSpace.ControlStructureSpacing.BlankLineAfterEnd" />
		<exclude name="WordPress.WP.GlobalVariablesOverride.Prohibited" />
		<exclude name="WordPress.WP.I18n.NonSingularStringLiteralDomain" />
	</rule>
	
	<!-- Let's also check that everything is properly documented. -->
	<rule ref="WordPress-Docs"/>
	
	<!-- Add in some extra rules from other standards. -->
	<!-- <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/> -->
	<rule ref="Generic.Commenting.Todo"/>
	
	<!-- Check for PHP cross-version compatibility. -->
	<!--
	To enable this, the PHPCompatibility standard needs
	to be installed.
	See the readme for installation instructions:
	https://github.com/wimg/PHPCompatibility
	-->
	<!--
	<config name="testVersion" value="5.2-99.0"/>
	<rule ref="PHPCompatibility"/>
	-->
	
	<!--
	To get the optimal benefits of using WPCS, we should add a couple of
	custom properties.
	Adjust the values of these properties to fit our needs.

	For information on additional custom properties available, check out
	the wiki:
	https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties
	-->
	<config name="minimum_supported_wp_version" value="5.0"/>
	
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array" value="atum"/>
		</properties>
	</rule>
	
	<rule ref="WordPress.NamingConventions.ValidHookName">
		<properties>
			<property name="additionalWordDelimiters" value="-/"/>
		</properties>
	</rule>
	
	<rule ref="WordPress.WhiteSpace.PrecisionAlignment">
		<properties>
			<property name="ignoreAlignmentTokens" type="array" value="T_COMMENT,T_INLINE_HTML"/>
		</properties>
	</rule>
	
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array" value="atum, Atum, woocommerce" />
		</properties>
	</rule>
	
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie" />
	<rule ref="Generic.Classes.OpeningBraceSameLine" />
	
	<rule ref="Squiz.Classes.ClassFileName">
		<include-pattern>classes/</include-pattern>
	</rule>
	
	<rule ref="Squiz.Classes.ValidClassName">
		<include-pattern>classes/</include-pattern>
	</rule>

</ruleset>
